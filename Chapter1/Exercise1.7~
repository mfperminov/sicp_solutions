#lang sicp
(define (square x)
  (* x x))
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))
(define (improve guess x)
  (average guess (/ x guess)))
(define (average x y)
  (/ (+ x y) 2))
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
(define (sqrt x)
  (sqrt-iter 1.0 x))
(sqrt 9)
(sqrt 0.000025)
; evaluated result = 0.0315. Error more than 6 times (correct answer 0.005)
; It happens because precision in good-enough? procedure is very big
; |0.0315*0.0315 - 0.000025| = 0.0009 < 0.001

(sqrt 100000000000000000000000)
; this procedure neever exits the loop, because the machine precision is unable to represent small differences between large numbers
; and if this is "bad number" on some moment two consecutive guess cannot get into 0.001 diff range the guess willbe the same in endless loop
; for example we can add one more '0' and answer will be immediate



